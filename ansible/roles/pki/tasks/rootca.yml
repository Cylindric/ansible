---
- name: Ensure root structures exist
  file:
    path: "{{ item }}"
    recurse: yes
  with_items:
    - "{{ pki_basepath }}/root-ca/certs"
    - "{{ pki_basepath }}/root-ca/crl"
    - "{{ pki_basepath }}/root-ca/newcerts"

- name: Ensure the root private structure exists
  file: 
    path: "{{ pki_basepath }}/root-ca/private"
    recurse: yes
    mode: '0700'

- name: Ensure the index exists
  file:
    path: "{{ pki_basepath }}/root-ca/index.txt"
    state: touch

- name: Ensure the index attributes exists and sets unique_subject
  lineinfile:
    dest: "{{ pki_basepath }}/root-ca/index.txt.attr"
    state: present
    line: "unique_subject = yes"
    create: yes

- name: Check if serial file exists
  stat: 
    path: "{{ pki_basepath }}/root-ca/serial"
  register: serial_exists

- name: Ensure the serial file exists and starts at 1000
  lineinfile:
    dest: "{{ pki_basepath }}/root-ca/serial"
    state: present
    line: "1000"
    create: yes
  when: serial_exists.stat.exists == false

- name: Check if crlnumber file exists
  stat: 
    path: "{{ pki_basepath }}/root-ca/crlnumber"
  register: crlnumber_exists

- name: Ensure the crlnumber file exists and starts at 1000
  lineinfile:
    dest: "{{ pki_basepath }}/root-ca/crlnumber"
    state: present
    line: "1000"
    create: yes
  when: crlnumber_exists.stat.exists == false

- name: Check the OpenSSL config exists
  template:
    src: openssl.cnf.j2
    dest: "{{ pki_basepath }}/root-ca/openssl.cnf"

- name: Make sure there is a root key
  shell: |
    openssl genrsa \
    -aes256 \
    -out private/root.key.pem \
    -passout pass:{{ pki_root_pass }} 4096
  args:
    chdir: "{{ pki_basepath}}/root-ca"
    creates: "{{ pki_basepath}}/root-ca/private/root.key.pem"
  register: created_new_root_key

- name: Make sure the root key is secure
  file:
    path: "{{ pki_basepath}}/root-ca/private/root.key.pem"
    mode: "0400"

- name: Delete existing cert if new key
  file:
    path: "{{ pki_basepath}}/root-ca/certs/root.cert.pem"
    state: absent
  when: created_new_root_key == true

- name: Make sure there is a root certificate
  shell: |
    openssl req \
    -config openssl.cnf \
    -key private/root.key.pem \
    -passin pass:{{ pki_root_pass }} \
    -new \
    -x509 \
    -days 7300 \
    -extensions v3_ca \
    -out certs/root.cert.pem
  args:
    chdir: "{{ pki_basepath}}/root-ca"
    creates: "{{ pki_basepath}}/root-ca/certs/root.cert.pem"
  register: created_new_root_cert

- name: Make sure the root certificate is read-only
  file:
    path: "{{ pki_basepath}}/root-ca/certs/root.cert.pem"
    mode: "0444"

- name: create certificate share
  file:
    path: /vagrant/artifacts/certs
    recurse: yes

- name: Delete existing shared cert if new cert
  file:
    path: /vagrant/artifacts/certs/root.cert.pem
    state: absent
  when: created_new_root_cert == true

# Just because this is in a VirtualBox, and ansible
# doesn't like copying into the mounted folder, use
# a shell copy.
# Because my host is Windows, use a CRT extension for
# easy inspecting.
- name: share root certificate
  shell: |
    cp "{{ pki_basepath}}/root-ca/certs/root.cert.pem" \
    /vagrant/artifacts/certs/root.cert.pem
  args:
    creates: /vagrant/artifacts/certs/root.crt

